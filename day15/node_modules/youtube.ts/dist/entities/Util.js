"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
exports.__esModule = true;
var axios_1 = __importDefault(require("axios"));
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var querystring_1 = __importDefault(require("querystring"));
var ytdl_core_1 = __importDefault(require("ytdl-core"));
var downloadURL = "https://www.youtube.com/download_my_video";
var Util = /** @class */ (function () {
    function Util(api) {
        var _this = this;
        this.api = api;
        this.resolveID = function (resolvable, type) { return __awaiter(_this, void 0, void 0, function () {
            var id, username, username, query;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        resolvable = resolvable.trim();
                        if (!(resolvable.includes("youtube.com") || resolvable.includes("youtu.be"))) return [3 /*break*/, 11];
                        if (!resolvable.includes("channel")) return [3 /*break*/, 1];
                        id = String(resolvable.match(/(?<=channel\/)(.*?)(?=(?:\?|\/|$))/)[0]);
                        return [3 /*break*/, 10];
                    case 1:
                        if (!resolvable.includes("c/")) return [3 /*break*/, 3];
                        username = String(resolvable.match(/(?<=c\/)(.*?)(?=(?:\?|\/|$))/)[0]);
                        return [4 /*yield*/, this.api.part("search", "id", { q: username, type: "channel" }).then(function (r) { return r.items[0] ? r.items[0].id.channelId : null; })];
                    case 2:
                        id = _a.sent();
                        return [3 /*break*/, 10];
                    case 3:
                        if (!resolvable.includes("user/")) return [3 /*break*/, 5];
                        username = String(resolvable.match(/(?<=user\/)(.*?)(?=(?:\?|\/|$))/)[0]);
                        return [4 /*yield*/, this.api.part("channels", "id", { forUsername: username }).then(function (r) { return r.items[0] ? r.items[0].id : null; })];
                    case 4:
                        id = _a.sent();
                        return [3 /*break*/, 10];
                    case 5:
                        if (!resolvable.includes("watch?v=")) return [3 /*break*/, 6];
                        id = String(resolvable.match(/(?<=watch\?v=)(.*?)(?=(?:&|$))/)[0]);
                        return [3 /*break*/, 10];
                    case 6:
                        if (!resolvable.includes("youtu.be")) return [3 /*break*/, 7];
                        id = String(resolvable.match(/(?<=youtu.be\/)(.*?)(?=(?:\?|$))/)[0]);
                        return [3 /*break*/, 10];
                    case 7:
                        if (!resolvable.includes("playlist?list=")) return [3 /*break*/, 8];
                        id = String(resolvable.match(/(?<=playlist\?list=)(.*?)(?=(?:\?|$))/)[0]);
                        return [3 /*break*/, 10];
                    case 8:
                        query = String(resolvable.match(/(?<=youtube.com\/)(.*?)(?=(?:\?|$))/)[0]);
                        return [4 /*yield*/, this.api.part("search", "id", { q: query, type: "channel" }).then(function (r) { return r.items[0] ? r.items[0].id.channelId : null; })];
                    case 9:
                        id = _a.sent();
                        _a.label = 10;
                    case 10: return [3 /*break*/, 18];
                    case 11:
                        if (!(type === "video" && (resolvable.length < 11 || resolvable.includes(" ")))) return [3 /*break*/, 13];
                        return [4 /*yield*/, this.api.part("search", "id", { q: resolvable, type: "video" }).then(function (r) { return r.items[0] ? r.items[0].id.videoId : null; })];
                    case 12:
                        id = id = _a.sent();
                        return [3 /*break*/, 18];
                    case 13:
                        if (!(type === "channel" && ((!resolvable.startsWith("UC") && resolvable.length < 20) || resolvable.includes(" ")))) return [3 /*break*/, 15];
                        return [4 /*yield*/, this.api.part("search", "id", { q: resolvable, type: "channel" }).then(function (r) { return r.items[0] ? r.items[0].id.channelId : null; })];
                    case 14:
                        id = id = _a.sent();
                        return [3 /*break*/, 18];
                    case 15:
                        if (!(type === "playlist" && (resolvable.length < 20 || resolvable.includes(" ")))) return [3 /*break*/, 17];
                        return [4 /*yield*/, this.api.part("search", "id", { q: resolvable, type: "playlist" }).then(function (r) { return r.items[0] ? r.items[0].id.playlistId : null; })];
                    case 16:
                        id = id = _a.sent();
                        return [3 /*break*/, 18];
                    case 17:
                        id = resolvable;
                        _a.label = 18;
                    case 18:
                        if (!id)
                            return [2 /*return*/, Promise.reject("Invalid URL or query.")];
                        return [2 /*return*/, id];
                }
            });
        }); };
        this.downloadMyVideo = function (videoResolvable, key, cookie, dest) { return __awaiter(_this, void 0, void 0, function () {
            var id, headers, response, filename;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(videoResolvable, "video")];
                    case 1:
                        id = _a.sent();
                        headers = {
                            "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36",
                            "accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3",
                            "accept-encoding": "gzip, deflate, br",
                            "accept-language": "en-US,en;q=0.9",
                            "referer": "https://studio.youtube.com/video/" + id + "/edit?utm_campaign=upgrade&utm_medium=redirect&utm_source=%2Fmy_videos",
                            "sec-fetch-mode": "navigate",
                            "sec-fetch-site": "same-site",
                            "sec-fetch-user": "?1",
                            "upgrade-insecure-requests": 1,
                            "cookie": cookie
                        };
                        return [4 /*yield*/, axios_1["default"].get(downloadURL, { responseType: "arraybuffer", params: { t: key, v: id }, headers: headers })];
                    case 2:
                        response = _a.sent();
                        if (!response.headers["content-disposition"])
                            return [2 /*return*/, Promise.reject("Cannot download this video.")];
                        filename = querystring_1["default"].unescape(response.headers["content-disposition"].replace("attachment; filename=\"", "").slice(0, -1));
                        if (!dest)
                            dest = "./";
                        if (!fs_1["default"].existsSync(dest))
                            fs_1["default"].mkdirSync(dest, { recursive: true });
                        if (dest.endsWith("/"))
                            dest = dest.slice(0, -1);
                        dest = dest + "/" + filename;
                        fs_1["default"].writeFileSync(dest, Buffer.from(response.data, "binary"));
                        return [2 /*return*/, dest];
                }
            });
        }); };
        this.iteratePages = function (searchResults, params, limit) { return __awaiter(_this, void 0, void 0, function () {
            var resultArray, search, i, rejected, newSearch, i, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        resultArray = [];
                        return [4 /*yield*/, this.api.get("search", params)];
                    case 1:
                        search = _b.sent();
                        for (i = 0; i < search.items.length; i++) {
                            if (limit) {
                                if (limit === 0)
                                    return [2 /*return*/, resultArray];
                                limit--;
                            }
                            resultArray.push(search.items[i]);
                        }
                        if (!limit)
                            limit = Infinity;
                        rejected = false;
                        _b.label = 2;
                    case 2:
                        if (!(rejected === false && limit > 0)) return [3 /*break*/, 7];
                        params.pageToken = searchResults.nextPageToken;
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.api.get("search", params)];
                    case 4:
                        newSearch = _b.sent();
                        for (i = 0; i < newSearch.items.length; i++) {
                            resultArray.push(newSearch.items[i]);
                            limit--;
                        }
                        searchResults = newSearch;
                        return [3 /*break*/, 6];
                    case 5:
                        _a = _b.sent();
                        rejected = true;
                        return [3 /*break*/, 6];
                    case 6: return [3 /*break*/, 2];
                    case 7: return [2 /*return*/, resultArray];
                }
            });
        }); };
        this.downloadMyVideos = function (yourChannel, key, cookie, dest, limit) { return __awaiter(_this, void 0, void 0, function () {
            var id, search, videos, links, i, link, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(yourChannel, "channel")];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.api.get("search", { channelId: id, order: "date" })];
                    case 2:
                        search = _a.sent();
                        return [4 /*yield*/, this.iteratePages(search, { channelId: id, order: "date" }, limit)];
                    case 3:
                        videos = _a.sent();
                        links = [];
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < videos.length)) return [3 /*break*/, 9];
                        if (!videos[i].id.videoId) return [3 /*break*/, 8];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.downloadMyVideo(videos[i].id.videoId, key, cookie, dest)];
                    case 6:
                        link = _a.sent();
                        links.push(link);
                        return [3 /*break*/, 8];
                    case 7:
                        error_1 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8:
                        i++;
                        return [3 /*break*/, 4];
                    case 9: return [2 /*return*/, links];
                }
            });
        }); };
        this.awaitStream = function (writeStream) { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        writeStream.on("finish", resolve);
                        writeStream.on("error", reject);
                    })];
            });
        }); };
        this.downloadVideo = function (videoResolvable, dest, ytdlOptions) { return __awaiter(_this, void 0, void 0, function () {
            var options, id, url, info, clean, writeStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!ytdlOptions)
                            ytdlOptions = {};
                        options = { quality: "highest" };
                        if (ytdlOptions.format && !ytdlOptions.quality) {
                            options = { filter: function (format) { return format.container === ytdlOptions.format; } };
                        }
                        if (ytdlOptions.quality) {
                            options = { filter: function (format) {
                                    if (!ytdlOptions.format)
                                        ytdlOptions.format = "mp4";
                                    var resolution = ytdlOptions.quality.split("p")[0] + "p";
                                    var fps = ytdlOptions.quality.split("p")[1] || "30";
                                    if ((format.container === ytdlOptions.format) &&
                                        (format.resolution === resolution) &&
                                        (format.fps === fps)) {
                                        return true;
                                    }
                                    else {
                                        return false;
                                    }
                                }
                            };
                        }
                        return [4 /*yield*/, this.resolveID(videoResolvable, "video")];
                    case 1:
                        id = _a.sent();
                        url = "https://www.youtube.com/watch?v=" + id;
                        return [4 /*yield*/, ytdl_core_1["default"].getInfo(url)];
                    case 2:
                        info = _a.sent();
                        clean = info.videoDetails.title.replace(/\//g, " ").replace(/\\/g, " ");
                        if (!dest)
                            dest = "./";
                        if (dest.endsWith("/"))
                            dest = dest.slice(0, -1);
                        if (!fs_1["default"].existsSync(dest))
                            fs_1["default"].mkdirSync(dest, { recursive: true });
                        writeStream = fs_1["default"].createWriteStream(dest + "/" + clean + ".mp4");
                        return [4 /*yield*/, new Promise(function (resolve) {
                                ytdl_core_1["default"](url, options).pipe(writeStream).on("finish", function () { return resolve(); });
                            })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, dest + "/" + clean + ".mp4"];
                }
            });
        }); };
        this.downloadVideos = function (videos, dest, ytdlOptions) { return __awaiter(_this, void 0, void 0, function () {
            var links, i, id, link, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        links = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < videos.length)) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        id = videos[i];
                        if (id.hasOwnProperty("id"))
                            id = videos[i].id;
                        return [4 /*yield*/, this.downloadVideo(id, dest, ytdlOptions)];
                    case 3:
                        link = _a.sent();
                        links.push(link);
                        return [3 /*break*/, 5];
                    case 4:
                        error_2 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, links];
                }
            });
        }); };
        this.downloadChannelVideos = function (channelResolvable, dest, ytdlOptions, limit) { return __awaiter(_this, void 0, void 0, function () {
            var id, search, videos, links, i, link, error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(channelResolvable, "channel")];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.api.get("search", { channelId: id, order: "date" })];
                    case 2:
                        search = _a.sent();
                        return [4 /*yield*/, this.iteratePages(search, { channelId: id, order: "date" }, limit)];
                    case 3:
                        videos = _a.sent();
                        links = [];
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < videos.length)) return [3 /*break*/, 9];
                        if (!videos[i].id.videoId) return [3 /*break*/, 8];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.downloadVideo(videos[i].id.videoId, dest, ytdlOptions)];
                    case 6:
                        link = _a.sent();
                        links.push(link);
                        return [3 /*break*/, 8];
                    case 7:
                        error_3 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8:
                        i++;
                        return [3 /*break*/, 4];
                    case 9: return [2 /*return*/, links];
                }
            });
        }); };
        this.downloadMP3 = function (videoResolvable, dest) { return __awaiter(_this, void 0, void 0, function () {
            var id, url, info, clean, writeStream;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(videoResolvable, "video")];
                    case 1:
                        id = _a.sent();
                        url = "https://www.youtube.com/watch?v=" + id;
                        return [4 /*yield*/, ytdl_core_1["default"].getInfo(url)];
                    case 2:
                        info = _a.sent();
                        clean = info.videoDetails.title.replace(/\//g, " ").replace(/\\/g, " ");
                        if (!dest)
                            dest = "./";
                        if (dest.endsWith("/"))
                            dest = dest.slice(0, -1);
                        if (!fs_1["default"].existsSync(dest))
                            fs_1["default"].mkdirSync(dest, { recursive: true });
                        writeStream = fs_1["default"].createWriteStream(dest + "/" + clean + ".mp3");
                        return [4 /*yield*/, new Promise(function (resolve) {
                                ytdl_core_1["default"](url, { filter: "audioonly" }).pipe(writeStream).on("finish", function () { return resolve(); });
                            })];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, dest + "/" + clean + ".mp3"];
                }
            });
        }); };
        this.downloadMP3s = function (videos, dest) { return __awaiter(_this, void 0, void 0, function () {
            var links, i, id, link, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        links = [];
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i < videos.length)) return [3 /*break*/, 6];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        id = videos[i];
                        if (id.hasOwnProperty("id"))
                            id = videos[i].id;
                        return [4 /*yield*/, this.downloadMP3(id, dest)];
                    case 3:
                        link = _a.sent();
                        links.push(link);
                        return [3 /*break*/, 5];
                    case 4:
                        error_4 = _a.sent();
                        return [3 /*break*/, 5];
                    case 5:
                        i++;
                        return [3 /*break*/, 1];
                    case 6: return [2 /*return*/, links];
                }
            });
        }); };
        this.downloadChannelMP3s = function (channelResolvable, dest, limit) { return __awaiter(_this, void 0, void 0, function () {
            var id, search, videos, links, i, link, error_5;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(channelResolvable, "channel")];
                    case 1:
                        id = _a.sent();
                        return [4 /*yield*/, this.api.get("search", { channelId: id, order: "date" })];
                    case 2:
                        search = _a.sent();
                        return [4 /*yield*/, this.iteratePages(search, { channelId: id, order: "date" }, limit)];
                    case 3:
                        videos = _a.sent();
                        links = [];
                        i = 0;
                        _a.label = 4;
                    case 4:
                        if (!(i < videos.length)) return [3 /*break*/, 9];
                        if (!videos[i].id.videoId) return [3 /*break*/, 8];
                        _a.label = 5;
                    case 5:
                        _a.trys.push([5, 7, , 8]);
                        return [4 /*yield*/, this.downloadMP3(videos[i].id.videoId, dest)];
                    case 6:
                        link = _a.sent();
                        links.push(link);
                        return [3 /*break*/, 8];
                    case 7:
                        error_5 = _a.sent();
                        return [3 /*break*/, 8];
                    case 8:
                        i++;
                        return [3 /*break*/, 4];
                    case 9: return [2 /*return*/, links];
                }
            });
        }); };
        this.streamMP3 = function (videoResolvable) { return __awaiter(_this, void 0, void 0, function () {
            var id, url;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.resolveID(videoResolvable, "video")];
                    case 1:
                        id = _a.sent();
                        url = "https://www.youtube.com/watch?v=" + id;
                        return [2 /*return*/, ytdl_core_1["default"](url, { filter: "audioonly" })];
                }
            });
        }); };
        /**
         * Downloads the thumbnail of a youtube video.
         */
        this.downloadThumbnail = function (videoResolvable, folder) { return __awaiter(_this, void 0, void 0, function () {
            var video, thumbnail, dest, arrayBuffer;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!folder)
                            folder = "./";
                        if (!fs_1["default"].existsSync(folder))
                            fs_1["default"].mkdirSync(folder, { recursive: true });
                        return [4 /*yield*/, this.getVideo(videoResolvable)];
                    case 1:
                        video = _a.sent();
                        thumbnail = video.snippet.thumbnails.maxres ? video.snippet.thumbnails.maxres.url : video.snippet.thumbnails.high.url;
                        dest = path_1["default"].join(folder, video.snippet.title + ".png");
                        return [4 /*yield*/, axios_1["default"].get(thumbnail, { responseType: "arraybuffer" }).then(function (r) { return r.data; })];
                    case 2:
                        arrayBuffer = _a.sent();
                        fs_1["default"].writeFileSync(dest, Buffer.from(arrayBuffer, "binary"));
                        return [2 /*return*/, dest];
                }
            });
        }); };
        this.getVideo = function (videoResolvable, params) { return __awaiter(_this, void 0, void 0, function () {
            var id, response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!params)
                            params = {};
                        return [4 /*yield*/, this.resolveID(videoResolvable, "video")];
                    case 1:
                        id = _a.sent();
                        params.id = id;
                        return [4 /*yield*/, this.api.get("video", params)];
                    case 2:
                        response = _a.sent();
                        return [2 /*return*/, response.items[0]];
                }
            });
        }); };
    }
    return Util;
}());
exports.Util = Util;
